basePath: /
definitions:
  config.HTTPError400:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: Bad Request
        type: string
    type: object
  config.HTTPError401:
    properties:
      code:
        example: 401
        type: integer
      message:
        example: Unauthorized
        type: string
    type: object
  config.HTTPError404:
    properties:
      code:
        example: 404
        type: integer
      message:
        example: Not Found
        type: string
    type: object
  model.Categoria:
    properties:
      grupo:
        maxLength: 255
        minLength: 3
        type: string
      id:
        type: integer
      produto:
        items:
          $ref: '#/definitions/model.Produto'
        type: array
    required:
    - grupo
    type: object
  model.Produto:
    properties:
      categoria:
        $ref: '#/definitions/model.Categoria'
      categoria_id:
        example: 1
        minimum: 0
        type: integer
      foto:
        type: string
      id:
        type: integer
      nome:
        maxLength: 255
        minLength: 3
        type: string
      preco:
        type: number
      usuario:
        $ref: '#/definitions/model.Usuario'
      usuario_id:
        example: 1
        type: integer
    required:
    - categoria_id
    - nome
    - preco
    - usuario_id
    type: object
  model.Role:
    properties:
      descricao:
        type: string
      id:
        type: integer
      role:
        type: string
      usuario:
        items:
          $ref: '#/definitions/model.Usuario'
        type: array
    required:
    - descricao
    - role
    type: object
  model.Usuario:
    properties:
      foto:
        type: string
      id:
        type: integer
      nome:
        type: string
      produto:
        items:
          $ref: '#/definitions/model.Produto'
        type: array
      role:
        $ref: '#/definitions/model.Role'
      role_id:
        example: 1
        type: integer
      senha:
        type: string
      usuario:
        type: string
    required:
    - nome
    - senha
    - usuario
    type: object
  model.UsuarioLogin:
    properties:
      foto:
        type: string
      id:
        type: integer
      nome:
        type: string
      senha:
        type: string
      token:
        type: string
      usuario:
        type: string
    type: object
host: farmacia-go.onrender.com
info:
  contact:
    email: rafaelproinfo@gmail.com
    name: Rafael Queiróz
    url: https://github.com/rafaelq80
  description: Projeto E-commerce - Farmácia
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: E-commerce - Farmácia
  version: "1.0"
paths:
  /categorias:
    get:
      consumes:
      - application/json
      description: Lista todas as Categorias
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Categoria'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/config.HTTPError401'
      security:
      - Bearer: []
      summary: Listar Categorias
      tags:
      - categorias
    post:
      consumes:
      - application/json
      description: Cria uma nova Categoria
      parameters:
      - description: Criar Categoria
        in: body
        name: categoria
        required: true
        schema:
          $ref: '#/definitions/model.Categoria'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Categoria'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/config.HTTPError401'
      security:
      - Bearer: []
      summary: Criar Categoria
      tags:
      - categorias
    put:
      consumes:
      - application/json
      description: Edita uma Categoria
      parameters:
      - description: Atualizar Categoria
        in: body
        name: Categoria
        required: true
        schema:
          $ref: '#/definitions/model.Categoria'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Categoria'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/config.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/config.HTTPError404'
      security:
      - Bearer: []
      summary: Atualizar Categoria
      tags:
      - categorias
  /categorias/{id}:
    delete:
      consumes:
      - application/json
      description: Apaga uma Categoria
      parameters:
      - description: Id da Categoria
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/config.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/config.HTTPError404'
      security:
      - Bearer: []
      summary: Deletar Categoria
      tags:
      - categorias
    get:
      consumes:
      - application/json
      description: Lista uma Categoria por id
      parameters:
      - description: Id da Categoria
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Categoria'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/config.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/config.HTTPError404'
      security:
      - Bearer: []
      summary: Listar Categoria por id
      tags:
      - categorias
  /categorias/grupo/{grupo}:
    get:
      consumes:
      - application/json
      description: Lista todas as Categorias por grupo
      parameters:
      - description: Grupo do Medicamento (Antibiótico, Antihistamínico, entre outros)
        in: path
        name: grupo
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Categoria'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/config.HTTPError401'
      security:
      - Bearer: []
      summary: Listar Categorias por grupo
      tags:
      - categorias
  /produtos:
    get:
      consumes:
      - application/json
      description: Lista todos os Produtos
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Produto'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/config.HTTPError401'
      security:
      - Bearer: []
      summary: Listar Produtos
      tags:
      - produtos
    post:
      consumes:
      - application/json
      description: Cria um novo Produto
      parameters:
      - description: Criar Produto
        in: body
        name: produto
        required: true
        schema:
          $ref: '#/definitions/model.Produto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Produto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/config.HTTPError401'
      security:
      - Bearer: []
      summary: Criar Produto
      tags:
      - produtos
    put:
      consumes:
      - application/json
      description: Edita um Produto
      parameters:
      - description: Atualizar Produto
        in: body
        name: Produto
        required: true
        schema:
          $ref: '#/definitions/model.Produto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Produto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/config.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/config.HTTPError404'
      security:
      - Bearer: []
      summary: Atualizar Produto
      tags:
      - produtos
  /produtos/{id}:
    delete:
      consumes:
      - application/json
      description: Apaga um Produto
      parameters:
      - description: Id do Produto
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/config.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/config.HTTPError404'
      security:
      - Bearer: []
      summary: Deletar Produto
      tags:
      - produtos
    get:
      consumes:
      - application/json
      description: Lista um Produto por id
      parameters:
      - description: Id do Produto
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Produto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/config.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/config.HTTPError404'
      security:
      - Bearer: []
      summary: Listar Produto por id
      tags:
      - produtos
  /produtos/nome/{nome}:
    get:
      consumes:
      - application/json
      description: Lista todas os Produtos por nome
      parameters:
      - description: Nome do Produto
        in: path
        name: nome
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Produto'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/config.HTTPError401'
      security:
      - Bearer: []
      summary: Listar Produtos por nome
      tags:
      - produtos
  /roles:
    get:
      consumes:
      - application/json
      description: Lista todas as Roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Role'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/config.HTTPError401'
      security:
      - Bearer: []
      summary: Listar Roles
      tags:
      - roles
    post:
      consumes:
      - application/json
      description: Cria uma nova Role
      parameters:
      - description: Criar Role
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/model.Role'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/config.HTTPError401'
      security:
      - Bearer: []
      summary: Criar Role
      tags:
      - roles
    put:
      consumes:
      - application/json
      description: Edita uma Role
      parameters:
      - description: Atualizar Role
        in: body
        name: Role
        required: true
        schema:
          $ref: '#/definitions/model.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Role'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/config.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/config.HTTPError404'
      security:
      - Bearer: []
      summary: Atualizar Role
      tags:
      - roles
  /roles/{id}:
    get:
      consumes:
      - application/json
      description: Lista uma Role por id
      parameters:
      - description: Id da Role
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Role'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/config.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/config.HTTPError404'
      security:
      - Bearer: []
      summary: Listar Role por id
      tags:
      - roles
  /usuarios:
    post:
      consumes:
      - application/json
      description: Cria um novo Usuario
      parameters:
      - description: Criar Usuario
        in: body
        name: usuario
        required: true
        schema:
          $ref: '#/definitions/model.Usuario'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Usuario'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.HTTPError400'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/config.HTTPError401'
      summary: Criar Usuario
      tags:
      - usuarios
  /usuarios/{id}:
    get:
      consumes:
      - application/json
      description: Lista um Usuario por id
      parameters:
      - description: Id do Usuario
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Usuario'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/config.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/config.HTTPError404'
      security:
      - Bearer: []
      summary: Listar Usuario por id
      tags:
      - usuarios
  /usuarios/all:
    get:
      consumes:
      - application/json
      description: Lista todos os Usuarios
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Usuario'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/config.HTTPError401'
      security:
      - Bearer: []
      summary: Listar Usuarios
      tags:
      - usuarios
  /usuarios/atualizar:
    put:
      consumes:
      - application/json
      description: Edita os dados de um Usuario
      parameters:
      - description: Atualizar Usuario
        in: body
        name: Usuario
        required: true
        schema:
          $ref: '#/definitions/model.Usuario'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Usuario'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/config.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/config.HTTPError404'
      security:
      - Bearer: []
      summary: Atualizar Usuario
      tags:
      - usuarios
  /usuarios/logar:
    post:
      consumes:
      - application/json
      description: Autentica um Usuario
      parameters:
      - description: Autenticar Usuario
        in: body
        name: usuario
        required: true
        schema:
          $ref: '#/definitions/model.UsuarioLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UsuarioLogin'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/config.HTTPError400'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/config.HTTPError401'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/config.HTTPError404'
      summary: Autenticar Usuario
      tags:
      - usuarios
schemes:
- https
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
